(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{152:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=o.a.createContext({}),s=function(e){var t=o.a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=s(e.components);return o.a.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(n),b=a,m=u["".concat(i,".").concat(b)]||u[b]||p[b]||r;return n?o.a.createElement(m,c(c({ref:t},d),{},{components:n})):o.a.createElement(m,c({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=b;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var d=2;d<r;d++)i[d]=n[d];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},75:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return s}));var a=n(3),o=n(7),r=(n(0),n(152)),i={id:"data-fetching",title:"Data fetching"},c={unversionedId:"data-fetching",id:"data-fetching",isDocsHomePage:!1,title:"Data fetching",description:"One of the most groundbreaking things about Remotion is that you can fetch data from an API to display in your video like you would in a regular React project. It works almost like you are used to: You can use the fetch API to load the data in a useEffect and set a state.",source:"@site/docs/data-fetching.md",slug:"/data-fetching",permalink:"/docs/data-fetching",editUrl:"https://github.com/JonnyBurger/remotion/edit/main/packages/docs/docs/data-fetching.md",version:"current",sidebar:"someSidebar",previous:{title:"Plain JavaScript",permalink:"/docs/javascript"},next:{title:"Encoding Guide",permalink:"/docs/encoding"}},l=[{value:"Telling Remotion to wait until the data is loaded",id:"telling-remotion-to-wait-until-the-data-is-loaded",children:[]},{value:"Caching",id:"caching",children:[]},{value:"Time limit",id:"time-limit",children:[]},{value:"Using <code>delayRender()</code> to calculate video metadata",id:"using-delayrender-to-calculate-video-metadata",children:[]},{value:"See also",id:"see-also",children:[]}],d={toc:l};function s(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"One of the most groundbreaking things about Remotion is that you can fetch data from an API to display in your video like you would in a regular React project. It works almost like you are used to: You can use the ",Object(r.b)("inlineCode",{parentName:"p"},"fetch")," API to load the data in a ",Object(r.b)("inlineCode",{parentName:"p"},"useEffect")," and set a state."),Object(r.b)("h2",{id:"telling-remotion-to-wait-until-the-data-is-loaded"},"Telling Remotion to wait until the data is loaded"),Object(r.b)("p",null,"There are two functions, ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/delay-render"}),Object(r.b)("inlineCode",{parentName:"a"},"delayRender"))," and ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/continue-render"}),Object(r.b)("inlineCode",{parentName:"a"},"continueRender")),", which you can use to tell Remotion to not yet render the frame. If you want to asynchronously render a frame, you should call ",Object(r.b)("inlineCode",{parentName:"p"},"delayRender()")," as soon as possible, before the window ",Object(r.b)("inlineCode",{parentName:"p"},"onload")," event is fired. The function returns a handle that you need to give Remotion the green light to render later using ",Object(r.b)("inlineCode",{parentName:"p"},"continueRender()"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import {useEffect, useState} from 'react';\nimport {continueRender, delayRender} from 'remotion';\n\nconst handle = delayRender();\n\nexport const MyVideo = () => {\n  const [data, setData] = useState(null);\n\n  const fetchData = async () => {\n    const response = await fetch('http://example.com/api');\n    const json = await response.json();\n    setData(json);\n\n    continueRender(handle);\n  }\n\n  useEffect(() => {\n    fetchData();\n  },\xa0[]);\n\n  return (\n    <div>\n      {data ? (\n        <div>This video has data from an API! {JSON.stringify(data)}</div>\n      ) : null}\n    </div>\n  );\n}\n\n")),Object(r.b)("h2",{id:"caching"},"Caching"),Object(r.b)("p",null,"It is important to know that in the render process, data fetching works on a per-frame basis, so for every frame, the page gets fully reloaded and screenshotted. You should consider caching the result of your API, to avoid rate-limits and also to speed up the render of your video. We have two suggestions on how to do that:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Use the ",Object(r.b)("inlineCode",{parentName:"p"},"localStorage")," API to persist data after a network request and make a request only if the local storage is empty.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Fetch the data before the render, and store it as a JSON file, then import this JSON file."))),Object(r.b)("h2",{id:"time-limit"},"Time limit"),Object(r.b)("p",null,"You need to clear all handles created by ",Object(r.b)("inlineCode",{parentName:"p"},"delayRender")," within 30 seconds after the page is opened. This limit is imposed by Puppeteer, but makes a lot of sense as going over this limit would make the rendering process massively slow."),Object(r.b)("h2",{id:"using-delayrender-to-calculate-video-metadata"},"Using ",Object(r.b)("inlineCode",{parentName:"h2"},"delayRender()")," to calculate video metadata"),Object(r.b)("p",null,"You can also customize duration, frame rate and dimensions based on asynchronous data fetching:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"See: ",Object(r.b)("a",Object(a.a)({parentName:"strong"},{href:"dynamic-metadata"}),"Dynamic duration, FPS & dimensions")))),Object(r.b)("h2",{id:"see-also"},"See also"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/delay-render"}),"delayRender()"))))}s.isMDXComponent=!0}}]);