(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8956],{3905:function(e,t,n){"use strict";n.r(t),n.d(t,{MDXContext:function(){return p},MDXProvider:function(){return l},mdx:function(){return f},useMDXComponents:function(){return u},withMDXComponents:function(){return c}});var r=n(2784);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),c=function(e){return function(t){var n=u(t.components);return r.createElement(e,a({},t,{components:n}))}},u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,p=m(e,["components","mdxType","originalType","parentName"]),c=u(n),l=o,g=c["".concat(i,".").concat(l)]||c[l]||d[l]||a;return n?r.createElement(g,s(s({ref:t},p),{},{components:n})):r.createElement(g,s({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=g;var s={};for(var m in t)hasOwnProperty.call(t,m)&&(s[m]=t[m]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},76574:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return m},toc:function(){return p},default:function(){return u}});var r=n(22122),o=n(19756),a=(n(2784),n(3905)),i=["components"],s={title:"Webpack dynamic imports",id:"webpack-dynamic-imports"},m={unversionedId:"webpack-dynamic-imports",id:"webpack-dynamic-imports",isDocsHomePage:!1,title:"Webpack dynamic imports",description:"A common need in Remotion is to import assets from dynamic paths. This means that sometimes you don't know the exact path of an asset that should be imported upfront and you want to calculate it during runtime.",source:"@site/docs/dynamic-import.md",sourceDirName:".",slug:"/webpack-dynamic-imports",permalink:"/docs/webpack-dynamic-imports",editUrl:"https://github.com/remotion-dev/remotion/edit/main/packages/docs/docs/dynamic-import.md",version:"current",frontMatter:{title:"Webpack dynamic imports",id:"webpack-dynamic-imports"},sidebar:"someSidebar",previous:{title:"Performance Tips",permalink:"/docs/performance"},next:{title:"Non-seekable media",permalink:"/docs/non-seekable-media"}},p=[{value:"Write dynamic expressions correctly",id:"write-dynamic-expressions-correctly",children:[]},{value:"Import assets at runtime",id:"import-assets-at-runtime",children:[]},{value:"Adding assets after bundling",id:"adding-assets-after-bundling",children:[]},{value:"Set up an HTTP server",id:"set-up-an-http-server",children:[]},{value:"Struggling?",id:"struggling",children:[]}],c={toc:p};function u(e){var t=e.components,n=(0,o.default)(e,i);return(0,a.mdx)("wrapper",(0,r.default)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("p",null,"A common need in Remotion is to import assets from dynamic paths. This means that sometimes you don't know the exact path of an asset that should be imported upfront and you want to calculate it during runtime."),(0,a.mdx)("p",null,"This can become an unexpected hurdle in Webpack. On this page we collect some tips how to handle dynamic assets."),(0,a.mdx)("h2",{id:"write-dynamic-expressions-correctly"},"Write dynamic expressions correctly"),(0,a.mdx)("p",null,"Consider you have a PNG sequence of images with the following file structure:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"my-video/\n\u251c\u2500 src/\n\u2502  \u251c\u2500 assets/\n\u2502  \u2502  \u251c\u2500 image0.png\n\u2502  \u2502  \u251c\u2500 image1.png\n\u2502  \u2502  \u251c\u2500 image2.png\n\u2502  \u2502  \u251c\u2500 ...\n\u2502  \u2502  \u251c\u2500 image99.png\n\u2502  \u251c\u2500 index.tsx\n")),(0,a.mdx)("p",null,"Note that the following pattern doesn't work:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-tsx"},"import React from 'react';\nimport {Img, useCurrentFrame} from 'remotion';\n\nexport const DynamicImports: React.FC = () => {\n  const frame = useCurrentFrame();\n  const img = './assets/image' + frame + '.png'\n  return <Img src={require(img)} />;\n};\n")),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-console"},"Error: Cannot find module './image0.png'\n")),(0,a.mdx)("p",null,"However the following example ",(0,a.mdx)("strong",{parentName:"p"},"does")," work:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-tsx"},"import React from 'react';\nimport {Img, useCurrentFrame} from 'remotion';\n\nexport const DynamicImports: React.FC = () => {\n    const frame = useCurrentFrame();\n    return <Img src={require('./assets/image' + frame + '.png')} />;\n};\n")),(0,a.mdx)("p",null,"Webpack needs to figure out which assets it should bundle and cannot do it in the first example. However, it is smart enough to do so if you place your expression inside the ",(0,a.mdx)("inlineCode",{parentName:"p"},"require()")," or ",(0,a.mdx)("inlineCode",{parentName:"p"},"import()")," statement. In this case, Webpack will automatically bundle all ",(0,a.mdx)("inlineCode",{parentName:"p"},".png")," files in the ",(0,a.mdx)("inlineCode",{parentName:"p"},"assets/image")," folder even if the asset is never used. Therefore you have to be careful to not bundle too many assets."),(0,a.mdx)("p",null,"Please read ",(0,a.mdx)("a",{parentName:"p",href:"https://webpack.js.org/api/module-methods/#dynamic-expressions-in-import"},"the Webpack documentation page")," about this behavior if you would like to learn more."),(0,a.mdx)("h2",{id:"import-assets-at-runtime"},"Import assets at runtime"),(0,a.mdx)("p",null,"Let's imagine a scenario where the asset that should be imported is completely unknown and will be read at runtime, for example through an ",(0,a.mdx)("a",{parentName:"p",href:"/docs/get-input-props"},"input prop"),":"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-tsx"},'import {Img, getInputProps} from \'remotion\';\n\nconst DynamicAsset: React.FC = () => {\n  const inputProps = getInputProps() // {"imageSrc": "./assets/img0.png"}\n  return <Img src={require(inputProps.imageSrc)}/>\n}\n')),(0,a.mdx)("p",null,"This cannot work because Webpack has no ideas which assets it has to bundle. Therefore the import has to fail.\nLike above, you can force Webpack to bundle the whole assets folder by putting an expression inside the ",(0,a.mdx)("inlineCode",{parentName:"p"},"require()")," statement:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-tsx"},"import {Img, getInputProps} from 'remotion';\n\nconst DynamicAsset: React.FC = () => {\n  const inputProps = getInputProps() // {\"imageSrc\": \"img0.png\"}\n  // Works!\n  return <Img src={require('./assets/' + inputProps.imageSrc)}/>\n}\n")),(0,a.mdx)("h2",{id:"adding-assets-after-bundling"},"Adding assets after bundling"),(0,a.mdx)("p",null,"If you server-side render your video using the Node.JS APIs, you might find yourself in a situation where you want to add new assets after you have already bundled the Remotion application. In this scenario, it is simply impossible for Webpack to interpret a ",(0,a.mdx)("inlineCode",{parentName:"p"},"require()")," statement correctly."),(0,a.mdx)("p",null,"You can use the following workaround that relies on the fact that Remotion creates a static web server while rendering:"),(0,a.mdx)("ol",null,(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("a",{parentName:"li",href:"/docs/bundle"},(0,a.mdx)("inlineCode",{parentName:"a"},"bundle()"))," the video - the return value is a promise resolving to the folder where the bundle got saved."),(0,a.mdx)("li",{parentName:"ol"},"Copy a new asset into this folder."),(0,a.mdx)("li",{parentName:"ol"},"Rely on the fact that the asset is available via the static HTTP server. Since you only want this during rendering, use the ",(0,a.mdx)("inlineCode",{parentName:"li"},"process.env.NODE_ENV === 'production'")," statement to differentiate between development and rendering.")),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-tsx"},"import {Img, getInputProps} from 'remotion';\n\nexport const DynamicAsset: React.FC = () => {\n  const inputProps = getInputProps(); // {\"imageSrc\": \"assets/img0.png\"}\n  return (\n    <Img\n      src={\n        process.env.NODE_ENV === 'production'\n          ? `/${inputProps.imageSrc}`\n          : require('./assets/default-asset.png')\n      }\n    />\n  );\n}\n")),(0,a.mdx)("h2",{id:"set-up-an-http-server"},"Set up an HTTP server"),(0,a.mdx)("p",null,"As a last resort, you can spin up your own static HTTP server and import the assets via HTTP:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-sh"},"# From any directory\nnpx serve --cors ./src\n")),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-tsx"},'import {Img, getInputProps} from \'remotion\';\n\nconst HttpAsset: React.FC = () => {\n  const inputProps = getInputProps(); // {"imageSrc": "assets/img0.png"}\n  return <Img src={`http://localhost:5000/${inputProps.imageSrc}`} />\n}\n')),(0,a.mdx)("h2",{id:"struggling"},"Struggling?"),(0,a.mdx)("p",null,"If you still have troubles importing your assets, hit us up on ",(0,a.mdx)("a",{parentName:"p",href:"https://discord.gg/6VzzNDwUwV"},"Discord")," or file an issue. We'd love to hear your input about how we can improve and will help you out."))}u.isMDXComponent=!0}}]);