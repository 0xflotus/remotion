(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{152:function(e,t,r){"use strict";r.d(t,"a",(function(){return b})),r.d(t,"b",(function(){return d}));var n=r(0),o=r.n(n);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=o.a.createContext({}),s=function(e){var t=o.a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},b=function(e){var t=s(e.components);return o.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=o.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),b=s(r),m=n,d=b["".concat(l,".").concat(m)]||b[m]||u[m]||a;return r?o.a.createElement(d,c(c({ref:t},p),{},{components:r})):o.a.createElement(d,c({ref:t},p))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,l=new Array(a);l[0]=m;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:n,l[1]=c;for(var p=2;p<a;p++)l[p]=r[p];return o.a.createElement.apply(null,l)}return o.a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},83:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return l})),r.d(t,"metadata",(function(){return c})),r.d(t,"toc",(function(){return i})),r.d(t,"default",(function(){return s}));var n=r(3),o=r(7),a=(r(0),r(152)),l={title:"interpolateColors()",id:"interpolate-colors"},c={unversionedId:"interpolate-colors",id:"interpolate-colors",isDocsHomePage:!1,title:"interpolateColors()",description:"Allows you to map a range of values to colors using a concise syntax.",source:"@site/docs/interpolate-colors.md",slug:"/interpolate-colors",permalink:"/docs/interpolate-colors",editUrl:"https://github.com/JonnyBurger/remotion/edit/main/packages/docs/docs/interpolate-colors.md",version:"current",sidebar:"someSidebar",previous:{title:"interpolate()",permalink:"/docs/interpolate"},next:{title:"getInputProps()",permalink:"/docs/get-input-props"}},i=[{value:"Reference",id:"reference",children:[{value:"Params",id:"params",children:[]},{value:"Returns",id:"returns",children:[]}]},{value:"Example: interpolate colors",id:"example-interpolate-colors",children:[]},{value:"Example: interpolate <code>rgb</code> or <code>rgba</code> colors",id:"example-interpolate-rgb-or-rgba-colors",children:[]},{value:"Example: interpolate <code>hsl</code> or <code>hsla</code> colors",id:"example-interpolate-hsl-or-hsla-colors",children:[]},{value:"Example: interpolate color names",id:"example-interpolate-color-names",children:[]},{value:"See also",id:"see-also",children:[]}],p={toc:i};function s(e){var t=e.components,r=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(n.a)({},p,r,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Allows you to map a range of values to colors using a concise syntax."),Object(a.b)("h2",{id:"reference"},"Reference"),Object(a.b)("h3",{id:"params"},"Params"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"The input value."),Object(a.b)("li",{parentName:"ol"},"The range of values that you expect the input to assume."),Object(a.b)("li",{parentName:"ol"},"The range of output colors that you want the input to map to.")),Object(a.b)("h3",{id:"returns"},"Returns"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"interpolateColors()")," returns a ",Object(a.b)("inlineCode",{parentName:"p"},"rgba")," color string. eg: ",Object(a.b)("inlineCode",{parentName:"p"},"rgba(255, 100, 12, 1)")),Object(a.b)("h2",{id:"example-interpolate-colors"},"Example: interpolate colors"),Object(a.b)("p",null,"In this example, we are interpolating colors from red to yellow. At frame 0 (the start of the video), we want the color to be ",Object(a.b)("inlineCode",{parentName:"p"},"red"),". At frame 20, we want the color to be ",Object(a.b)("inlineCode",{parentName:"p"},"yellow"),"."),Object(a.b)("p",null,"Using the following snippet, we can calculate the current color for any frame:"),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-tsx"}),"import {useCurrentFrame, interpolateColors} from 'remotion';\n\nconst frame = useCurrentFrame(); // 10\n\nconst color = interpolateColors(input,\n  [0, 20],\n  ['red', 'yellow']\n); // rgba(255, 128, 0, 1)\n\nconst color = interpolateColors(input,\n  [0, 20],\n  ['#ff0000', '#ffff00']\n); // rgba(255, 128, 0, 1)\n")),Object(a.b)("h2",{id:"example-interpolate-rgb-or-rgba-colors"},"Example: interpolate ",Object(a.b)("inlineCode",{parentName:"h2"},"rgb")," or ",Object(a.b)("inlineCode",{parentName:"h2"},"rgba")," colors"),Object(a.b)("p",null,"In this example, we are interpolating colors from red to yellow. At frame 0 (the start of the video), we want the color to be ",Object(a.b)("inlineCode",{parentName:"p"},"red")," (",Object(a.b)("inlineCode",{parentName:"p"},"rgb(255, 0, 0)"),"). At frame 20, we want the color to be ",Object(a.b)("inlineCode",{parentName:"p"},"yellow")," (",Object(a.b)("inlineCode",{parentName:"p"},"rgba(255, 255, 0)"),")."),Object(a.b)("p",null,"Using the following snippet, we can calculate the current color for any frame:"),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-tsx"}),"import {useCurrentFrame, interpolateColors} from 'remotion'\n\nconst frame = useCurrentFrame(); // 10\n\n// RGB colors\nconst color = interpolateColors(input,\n  [0, 20],\n  ['rgb(255, 0, 0)', 'rgb(255, 255, 0)']\n); // rgba(255, 128, 0, 1)\n\n// RGBA colors\nconst color = interpolateColors(input,\n  [0, 20],\n  ['rgba(255, 0, 0, 1)', 'rgba(255, 255, 0, 0)']\n); // rgba(255, 128, 0, 0.5)\n")),Object(a.b)("h2",{id:"example-interpolate-hsl-or-hsla-colors"},"Example: interpolate ",Object(a.b)("inlineCode",{parentName:"h2"},"hsl")," or ",Object(a.b)("inlineCode",{parentName:"h2"},"hsla")," colors"),Object(a.b)("p",null,"In this example, we are interpolating colors from red to yellow. At frame 0 (the start of the video), we want the color to be ",Object(a.b)("inlineCode",{parentName:"p"},"red")," (",Object(a.b)("inlineCode",{parentName:"p"},"hsl(0, 100%, 50%)"),"). At frame 20, we want the color to be ",Object(a.b)("inlineCode",{parentName:"p"},"yellow")," (",Object(a.b)("inlineCode",{parentName:"p"},"hsl(60, 100%, 50%)"),")."),Object(a.b)("p",null,"Using the following snippet, we can calculate the current color for any frame:"),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-tsx"}),"import {useCurrentFrame, interpolateColors} from 'remotion'\n\nconst frame = useCurrentFrame(); // 10\n//hsl example\nconst color = interpolateColors(input,\n  [0, 20],\n  ['hsl(0, 100%, 50%)', 'hsl(60, 100%, 50%)']\n); // rgba(255, 128, 0, 1)\n\n//hsla example\nconst color = interpolateColors(input,\n  [0, 20],\n  ['hsla(0, 100%, 50%, 1)', 'hsla(60, 100%, 50%, 1)']\n); // rgba(255, 128, 0, 1)\n")),Object(a.b)("h2",{id:"example-interpolate-color-names"},"Example: interpolate color names"),Object(a.b)("p",null,"Interpolating CSS color names is also supported."),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-tsx"}),"import {useCurrentFrame, interpolateColors} from 'remotion'\n\nconst frame = useCurrentFrame(); // 10\n\nconst color = interpolateColors(input,\n  [0, 20],\n  ['red', 'yellow']\n); // rgba(255, 128, 0, 1)\n")),Object(a.b)("h2",{id:"see-also"},"See also"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/interpolate"}),"interpolate()"))))}s.isMDXComponent=!0}}]);